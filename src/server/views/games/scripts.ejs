<script>
    const gameId = <%- JSON.stringify(gameId) %>;
    const currentPlayerId = <%- JSON.stringify(currentPlayerId) %>;
</script>

<script src="/socket.io/socket.io.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

<script>
    let activeToast;

    function showToast(message) {
        if (activeToast) activeToast.hideToast();
        activeToast = Toastify({
            text: message,
            duration: 3000,
            gravity: "top",
            position: "center",
            backgroundColor: "#ff4d4f",
            style: {
                background: "linear-gradient(135deg, #ff4d4f, #ff6b6b)",
                color: "#fff",
                padding: "12px 20px",
                borderRadius: "8px",
                fontSize: "16px",
                fontWeight: "500",
                boxShadow: "0 4px 12px rgba(0, 0, 0, 0.15)",
                marginTop: "60px"
            }
        });
        activeToast.showToast();
    }

    document.getElementById("player-cards").addEventListener("click", async (e) => {
        const cardElement = e.target.closest(".card");
        if (cardElement) {
            const color = cardElement.dataset.color;
            const value = cardElement.dataset.value;

            if (value === "wild" || value === "wild_draw4") {
                const chosenColor = await showColorPicker();

                if (!["red", "yellow", "green", "blue"].includes(chosenColor)) {
                    showToast("Invalid color. Please try again");
                    return;
                }

                fetch(`/games/${gameId}/play-card`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({playerId: currentPlayerId, card: {color: chosenColor, value}})
                })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            showToast(data.message || "Invalid card play");
                        } else {
                            cardElement.remove();
                        }
                    })
                    .catch(() => {
                        showToast("An error occurred while playing the card");
                    });

                return;
            }

            fetch(`/games/${gameId}/play-card`, {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({playerId: currentPlayerId, card: {color, value}})
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        showToast(data.message || "Invalid card play");
                    } else {
                        cardElement.remove();
                    }
                })
                .catch(error => {
                    showToast("An error occurred while playing the card");
                });
        }
    });

    document.getElementById("draw-card-btn").addEventListener("click", () => {
        fetch(`/games/${gameId}/draw-card`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ playerId: currentPlayerId })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                } else {
                    showToast(data.message || "Failed to draw card");
                }
            });
    });

    const socket = io();

    socket.emit("join-game", gameId);

    socket.on("game-over", (data) => {
        const notification = document.createElement("div");
        notification.className = "absolute top-16 left-1/2 transform -translate-x-1/2 bg-red-500 text-white text-center px-6 py-3 rounded shadow-lg";
        notification.innerHTML = `
        <span class="block text-xl font-bold">Game Over!</span>
        <span>${data.winnerUsername} has won</span>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.remove();
            window.location.href = "/lobby";
        }, 3000);
    });

    socket.on("error", (data) => {
        console.error("Received error event:", data);
        if (data.playerId === currentPlayerId) {
            showToast(data.message);
            const cardElement = document.querySelector(
                `.card[data-color="${data.card.color}"][data-value="${data.card.value}"]`
            );
            if (cardElement) {
                cardElement.style.opacity = "1";
                cardElement.style.pointerEvents = "auto";
            }
        }
    });

    socket.on("game-state", (updatedState) => {
        updatePlayerCards(updatedState);
        updateOtherPlayers(updatedState);
        updateTopCard(updatedState);
        updateCurrentPlayer({
            playerId: updatedState.players[updatedState.currentTurn].id,
            currentPlayerUsername: updatedState.players[updatedState.currentTurn].username
        });
    });

    socket.on("turn-updated", (data) => {
        updateCurrentPlayer(data);
    });

    function updateCurrentPlayer(data) {
        const currentPlayerElement = document.getElementById("current-player");

        if (!currentPlayerElement) return;

        if (!data || !("playerId" in data)) {
            console.error("Invalid data passed to updateCurrentPlayer:", data);
            return;
        }

        if (data.playerId === currentPlayerId) {
            currentPlayerElement.textContent = "It's your turn!";
        } else {
            currentPlayerElement.textContent = `It's ${data.currentPlayerUsername}'s turn!`;
        }
    }

    function updatePlayerCards(gameState) {
        const currentPlayer = gameState.players.find(player => player.id === currentPlayerId);
        const playerCardsContainer = document.getElementById("player-cards");

        playerCardsContainer.innerHTML = "";

        if (currentPlayer) {
            currentPlayer.hand.forEach(card => {
                const cardElement = document.createElement("div");

                let cardText;
                if (card.value === "wild_draw4") {
                    cardText = "Wild Draw 4";
                } else if (card.value === "wild") {
                    cardText = "Wild";
                } else if (card.value === "draw2") {
                    cardText = `${card.color} Draw 2`;
                } else {
                    cardText = `${card.color} ${card.value}`;
                }

                cardElement.className = `card ${card.color || "wild"}`;
                cardElement.dataset.color = card.color || "null";
                cardElement.dataset.value = card.value;
                cardElement.textContent = cardText;
                playerCardsContainer.appendChild(cardElement);
            });
            const handCountElement = document.getElementById(`player-hand-${currentPlayerId}`);
            if (handCountElement) {
                handCountElement.textContent = `${currentPlayer.hand.length}`;
            }
        } else {
            playerCardsContainer.innerHTML = "<p>No cards available</p>";
        }
    }

    function updateOtherPlayers(gameState) {
        gameState.players.forEach(player => {
            if (player.id !== currentPlayerId) {
                const handCountSpan = document.getElementById(`player-hand-${player.id}`);
                if (handCountSpan) {
                    handCountSpan.textContent = player.hand.length;
                }
            }
        });
    }

    function updateTopCard(gameState) {
        const topCardContainer = document.getElementById("top-card");
        if (!topCardContainer) {
            console.error("Top card container not found.");
            return;
        }

        if (gameState.discardPile.length > 0) {
            const topCard = gameState.discardPile[gameState.discardPile.length - 1];
            const colorClass = topCard.color || "wild";

            let cardText;
            if (topCard.value === "wild_draw4") {
                cardText = "Wild Draw 4";
            } else if (topCard.value === "wild") {
                cardText = "Wild";
            } else if (topCard.value === "draw2") {
                cardText = "Draw 2";
            } else {
                cardText = topCard.value;
            }

            topCardContainer.className = `card ${colorClass} mb-4`;
            topCardContainer.innerHTML = `${topCard.color}<br>${cardText}`;
        } else {
            topCardContainer.className = "card mb-4";
            topCardContainer.textContent = "No Cards";
        }
    }

    function showColorPicker() {
        return new Promise((resolve) => {
            const modal = document.getElementById("color-picker-modal");
            modal.classList.remove("hidden");

            const buttons = modal.querySelectorAll(".color-btn");
            buttons.forEach((btn) => {
                btn.addEventListener("click", () => {
                    const color = btn.getAttribute("data-color");
                    modal.classList.add("hidden");
                    resolve(color);
                });
            });
        });
    }
</script>